{"version":3,"sources":["Components/Form.js","Components/Weather.js","App.js","serviceWorker.js","index.js"],"names":["Form","props","react_default","a","createElement","onSubmit","getWeather","className","type","name","placeholder","Weather","city","country","undefined","temperature","description","error","App","state","_callee","e","api_call","weatherData","regenerator_default","wrap","_context","prev","next","preventDefault","target","elements","value","fetch","concat","sent","json","list","_this","setState","Math","round","main","temp","sys","weather","document","body","style","backgroundSize","t0","backgroundImage","abrupt","stop","Components_Form","this","Components_Weather","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a6686f67.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Form = props => {\r\n    return (\r\n        <form onSubmit={props.getWeather} className=\"form__component\">\r\n            <input type=\"text\" name=\"city\" placeholder=\"Enter City...\"/>\r\n            <input type=\"text\" name=\"country\" placeholder=\"Enter Country...\"/>\r\n            <br />\r\n            <button className=\"form__button\">Get Weather</button>\r\n        </form>\r\n    );\r\n};\r\n\r\nexport default Form;","import React from \"react\";\r\n\r\nconst Weather = props => {\r\n    return (\r\n        <div className=\"weather__component\">\r\n            <div className=\"weather__location\">{props.city && props.country && <h1>{props.city}, {props.country}</h1>}</div>\r\n            <div className=\"weather__temperature\">{props.temperature !== undefined && <h1>{props.temperature} Â°C</h1>}</div>\r\n            <div className=\"weather__description\">{props.description && <h1>{props.description}</h1>}</div>\r\n            <div className=\"weather__error\">{props.error && <h1>{props.error}</h1>}</div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Weather;","import React from \"react\";\nimport Form from \"./Components/Form\";\nimport Weather from \"./Components/Weather\";\nimport styles from \"./styles.css\";\n\nclass App extends React.Component {\n      state = {\n        country: undefined,\n        city: undefined,\n        temperature: undefined,\n        description: undefined,\n        error: undefined,\n      };\n  \n  getWeather = async (e) => {\n      e.preventDefault();\n      const city = e.target.elements.city.value;\n      const country = e.target.elements.country.value;\n      const api_key = '161d84ef383d1193e9edc6ea5f4b9d39'\n      const api_call = await fetch(\n          `https://api.openweathermap.org/data/2.5/find?q=${city},${country}&units=metric&type=accurate&mode=json&APPID=${api_key}`\n      );\n      const weatherData = await api_call.json();\n\n      if (city && country && weatherData.list[0]) {\n      this.setState({\n        temperature: Math.round(weatherData.list[0].main.temp),\n        city: weatherData.list[0].name,\n        country: weatherData.list[0].sys.country,\n        description: weatherData.list[0].weather[0].main,\n        error: undefined,\n      })\n\n      document.body.style.backgroundSize = \"cover\";\n\n      switch (this.state.description) {\n        \n        case \"Clear\": \n          document.body.style.backgroundImage = \"url(https://images.pexels.com/photos/912110/pexels-photo-912110.jpeg?auto=compress&cs=tinysrgb&dpr=2&h=750&w=1260)\"\n          break;\n\n        case \"Clouds\": \n          document.body.style.backgroundImage = \"url(https://images.pexels.com/photos/414171/pexels-photo-414171.jpeg?auto=compress&cs=tinysrgb&dpr=2&h=750&w=1260)\"\n          break;\n\n        case \"Rain\": \n          document.body.style.backgroundImage = \"url(https://images.pexels.com/photos/166360/pexels-photo-166360.jpeg?auto=compress&cs=tinysrgb&dpr=2&h=750&w=1260)\"\n          break;\n\n        case \"Snow\": \n          document.body.style.backgroundImage = \"url(https://images.pexels.com/photos/773594/pexels-photo-773594.jpeg?auto=compress&cs=tinysrgb&dpr=2&h=750&w=1260)\"\n          break;\n\n        case \"Drizzle\": \n          document.body.style.backgroundImage = \"url(https://images.pexels.com/photos/39811/pexels-photo-39811.jpeg?auto=compress&cs=tinysrgb&dpr=2&h=750&w=1260)\"\n          break;\n\n        case \"Thunderstorm\": \n          document.body.style.backgroundImage = \"url(https://images.pexels.com/photos/1162251/pexels-photo-1162251.jpeg?auto=compress&cs=tinysrgb&dpr=2&h=750&w=1260)\"\n          break;\n\n        default: \n          document.body.style.backgroundImage = \"url(https://images.pexels.com/photos/258112/pexels-photo-258112.jpeg?auto=compress&cs=tinysrgb&dpr=2&h=750&w=1260)\"\n          break;\n      }\n  \n    } else {\n      this.setState({\n        temperature: undefined,\n        city: undefined,\n        country: undefined,\n        description: undefined,\n        error: 'Error',\n      })\n    }\n  };\n\n  render() {\n    return (\n      <div className=\"app__container\">\n          <p className=\"app__p\">Live weather data provided by OpenWeatherMap. Just enter a city and a country...</p>\n          <Form\n            getWeather={this.getWeather}\n          />\n          <Weather\n            country = {this.state.country}\n            city={this.state.city}\n            temperature={this.state.temperature}\n            description={this.state.description}\n          />\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}